//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MightyFX.Data.LegacySupport.WebService {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://tcwb01/dataserver/", ConfigurationName="WebService.dataserverSoap")]
    internal interface dataserverSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tcwb01/dataserver/login", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] login(string name, string password, string servername, bool windowslogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tcwb01/dataserver/login", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> loginAsync(string name, string password, string servername, bool windowslogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tcwb01/dataserver/query", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet query(string servername, int querytype, string[] tags, System.DateTime start, System.DateTime end, int secondinterval);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tcwb01/dataserver/query", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> queryAsync(string servername, int querytype, string[] tags, System.DateTime start, System.DateTime end, int secondinterval);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tcwb01/dataserver/get_tags", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet get_tags(string servername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tcwb01/dataserver/get_tags", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> get_tagsAsync(string servername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tcwb01/dataserver/getLog", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string getLog();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tcwb01/dataserver/getLog", ReplyAction="*")]
        System.Threading.Tasks.Task<string> getLogAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tcwb01/dataserver/clearLog", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void clearLog();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tcwb01/dataserver/clearLog", ReplyAction="*")]
        System.Threading.Tasks.Task clearLogAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal interface dataserverSoapChannel : MightyFX.Data.LegacySupport.WebService.dataserverSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class dataserverSoapClient : System.ServiceModel.ClientBase<MightyFX.Data.LegacySupport.WebService.dataserverSoap>, MightyFX.Data.LegacySupport.WebService.dataserverSoap {
        
        public dataserverSoapClient() {
        }
        
        public dataserverSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public dataserverSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public dataserverSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public dataserverSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] login(string name, string password, string servername, bool windowslogin) {
            return base.Channel.login(name, password, servername, windowslogin);
        }
        
        public System.Threading.Tasks.Task<string[]> loginAsync(string name, string password, string servername, bool windowslogin) {
            return base.Channel.loginAsync(name, password, servername, windowslogin);
        }
        
        public System.Data.DataSet query(string servername, int querytype, string[] tags, System.DateTime start, System.DateTime end, int secondinterval) {
            return base.Channel.query(servername, querytype, tags, start, end, secondinterval);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> queryAsync(string servername, int querytype, string[] tags, System.DateTime start, System.DateTime end, int secondinterval) {
            return base.Channel.queryAsync(servername, querytype, tags, start, end, secondinterval);
        }
        
        public System.Data.DataSet get_tags(string servername) {
            return base.Channel.get_tags(servername);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> get_tagsAsync(string servername) {
            return base.Channel.get_tagsAsync(servername);
        }
        
        public string getLog() {
            return base.Channel.getLog();
        }
        
        public System.Threading.Tasks.Task<string> getLogAsync() {
            return base.Channel.getLogAsync();
        }
        
        public void clearLog() {
            base.Channel.clearLog();
        }
        
        public System.Threading.Tasks.Task clearLogAsync() {
            return base.Channel.clearLogAsync();
        }
    }
}
